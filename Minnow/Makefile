PROGRAMMER=wiring
#auskommentieren f√ºr automatische Wahl
PORT=-P/dev/ttyACM0
BAUD=-b115200

# Microcontroller Type
MCU = atmega2560

# Target file name (without extension).
TARGET = Minnow_main

OPT = s

FORMAT = ihex

CPP_SRC = Minnow_main.cpp
CPP_SRC += AxisInfo.cpp
CPP_SRC += CommandQueue.cpp
CPP_SRC += ConfigTree.cpp
CPP_SRC += ConfigTreeNode.cpp
CPP_SRC += crc8.cpp
CPP_SRC += debug.cpp
CPP_SRC += Device_Buzzer.cpp
CPP_SRC += Device_Heater.cpp
CPP_SRC += Device_InputSwitch.cpp
CPP_SRC += Device_OutputSwitch.cpp
CPP_SRC += Device_PwmOutput.cpp
CPP_SRC += Device_Stepper.cpp
CPP_SRC += Device_TemperatureSensor.cpp
CPP_SRC += enqueue_command.cpp
CPP_SRC += firmware_configuration.cpp
CPP_SRC += HwSerial.cpp
CPP_SRC += initial_pin_state.cpp
CPP_SRC += language.cpp
CPP_SRC += movement_ISR.cpp
CPP_SRC += NVConfigStore.cpp
CPP_SRC += order_handlers.cpp
CPP_SRC += order_helpers.cpp
CPP_SRC += response.cpp
CPP_SRC += SoftPwmState.cpp
CPP_SRC += temperature_ISR.cpp
CPP_SRC += Tone.cpp
CPP_SRC += main.cpp
C_SRC += wiring.c
C_SRC += wiring_analog.c
C_SRC += wiring_digital.c
C_SRC += hooks.c

SRC = $(CPP_SRC) $(C_SRC)

CFLAGS = -g -O$(OPT) \
-mmcu=$(MCU) -I. \
-funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums \
-Wall \
-DF_CPU=16000000 \
-Wa,-adhlns=$(<:.c=.lst) \
$(patsubst %,-I%,$(EXTRAINCDIRS))

CPP_FLAGS = -g -O$(OPT) \
-funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums \
-Wall \
-DF_CPU=16000000 \
-std=c++03 \
-Wa,-adhlns=$(<:.cpp=.lst) \
$(patsubst %,-I%,$(EXTRAINCDIRS))
 
ASFLAGS = -Wa,-adhlns=$(<:.S=.lst),-gstabs 
LDFLAGS = -Wl,-Map=$(TARGET).map,--cref

CC = avr-g++

OBJCOPY = avr-objcopy
OBJDUMP = avr-objdump
SIZE = avr-size


REMOVE = rm -f
COPY = cp

HEXSIZE = $(SIZE) --target=$(FORMAT) $(TARGET).hex
ELFSIZE = $(SIZE) -A $(TARGET).elf



# Define Messages
# English
MSG_ERRORS_NONE = Errors: none
MSG_BEGIN = -------- begin --------
MSG_END = --------  end  --------
MSG_SIZE_BEFORE = Size before: 
MSG_SIZE_AFTER = Size after:
MSG_COFF = Converting to AVR COFF:
MSG_EXTENDED_COFF = Converting to AVR Extended COFF:
MSG_FLASH = Creating load file for Flash:
MSG_EEPROM = Creating load file for EEPROM:
MSG_EXTENDED_LISTING = Creating Extended Listing:
MSG_SYMBOL_TABLE = Creating Symbol Table:
MSG_LINKING = Linking:
MSG_COMPILING = Compiling:
MSG_ASSEMBLING = Assembling:
MSG_CLEANING = Cleaning project:




# Define all object files.
OBJ = $(CPP_SRC:.cpp=.o)  $(C_SRC:.c=.o) $(ASRC:.S=.o) 

# Define all listing files.
LST = $(ASRC:.S=.lst) $(CPP_SRC:.cpp=.lst) $(C_SRC:.c=.lst)

# Combine all necessary flags and optional flags.
# Add target processor to flags.
ALL_CFLAGS = -mmcu=$(MCU) -I. $(CFLAGS)
ALL_CPP_FLAGS = -mmcu=$(MCU) -I. $(CPP_FLAGS)
ALL_ASFLAGS = -mmcu=$(MCU) -I. -x assembler-with-cpp $(ASFLAGS)

# Default target: make program!
all: begin gccversion sizebefore $(TARGET).elf $(TARGET).hex $(TARGET).eep \
	$(TARGET).lss $(TARGET).sym sizeafter finished end

begin:
	@echo
	@echo $(MSG_BEGIN)

finished:
	@echo $(MSG_ERRORS_NONE)

end:
	@echo $(MSG_END)
	@echo


# Display size of file.
sizebefore:
	@if [ -f $(TARGET).elf ]; then echo; echo $(MSG_SIZE_BEFORE); $(ELFSIZE); echo; fi

sizeafter:
	@if [ -f $(TARGET).elf ]; then echo; echo $(MSG_SIZE_AFTER); $(ELFSIZE); echo; fi



# Display compiler version information.
gccversion : 
	@$(CC) --version




# Convert ELF to COFF for use in debugging / simulating in
# AVR Studio or VMLAB.
COFFCONVERT=$(OBJCOPY) --debugging \
	--change-section-address .data-0x800000 \
	--change-section-address .bss-0x800000 \
	--change-section-address .noinit-0x800000 \
	--change-section-address .eeprom-0x810000 


coff: $(TARGET).elf
	@echo
	@echo $(MSG_COFF) $(TARGET).cof
	$(COFFCONVERT) -O coff-avr $< $(TARGET).cof


extcoff: $(TARGET).elf
	@echo
	@echo $(MSG_EXTENDED_COFF) $(TARGET).cof
	$(COFFCONVERT) -O coff-ext-avr $< $(TARGET).cof




# Create final output files (.hex, .eep) from ELF output file.
%.hex: %.elf
	@echo
	@echo $(MSG_FLASH) $@
	$(OBJCOPY) -O $(FORMAT) -R .eeprom $< $@

%.eep: %.elf
	@echo
	@echo $(MSG_EEPROM) $@
	-$(OBJCOPY) -j .eeprom --set-section-flags=.eeprom="alloc,load" \
	--change-section-lma .eeprom=0 -O $(FORMAT) $< $@

# Create extended listing file from ELF output file.
%.lss: %.elf
	@echo
	@echo $(MSG_EXTENDED_LISTING) $@
	$(OBJDUMP) -h -S $< > $@

# Create a symbol table from ELF output file.
%.sym: %.elf
	@echo
	@echo $(MSG_SYMBOL_TABLE) $@
	avr-nm -n $< > $@



# Link: create ELF output file from object files.
.SECONDARY : $(TARGET).elf
.PRECIOUS : $(OBJ)
%.elf: $(OBJ)
	@echo
	@echo $(MSG_LINKING) $@
	$(CC) $(ALL_CFLAGS) $(OBJ) --output $@ $(LDFLAGS)


# Compile: create object files from C++ source files.
%.o : %.cpp
	@echo
	@echo $(MSG_COMPILING) $<
	$(CC) -c $(ALL_CPP_FLAGS) $< -o $@

# Compile: create assembler files from C source files.
%.s : %.c
	@echo
	@echo $(MSG_COMPILING) $<
	$(CC) -S $(ALL_CFLAGS) $< -o $@


# Assemble: create object files from assembler source files.
%.o : %.S
	@echo
	@echo $(MSG_ASSEMBLING) $<
	$(CC) -c $(ALL_ASFLAGS) $< -o $@

# Target: clean project.
clean: begin clean_list finished end

clean_list :
	@echo
	@echo $(MSG_CLEANING)
	$(REMOVE) $(TARGET).hex
	$(REMOVE) $(TARGET).eep
	$(REMOVE) $(TARGET).obj
	$(REMOVE) $(TARGET).cof
	$(REMOVE) $(TARGET).elf
	$(REMOVE) $(TARGET).map
	$(REMOVE) $(TARGET).obj
	$(REMOVE) $(TARGET).a90
	$(REMOVE) $(TARGET).sym
	$(REMOVE) $(TARGET).lnk
	$(REMOVE) $(TARGET).lss
	$(REMOVE) $(OBJ)
	$(REMOVE) $(LST)
	$(REMOVE) $(CPP_SRC:.cpp=.s)
	$(REMOVE) $(C_SRC:.c=.s)
	$(REMOVE) $(CPP_SRC:.cpp=.d)
	$(REMOVE) $(C_SRC:.c=.d)
	$(REMOVE) *~
	
program:
	avrdude -p$(MCU) $(PORT) $(BAUD) -c$(PROGRAMMER) -D -Uflash:w:$(TARGET).hex:i

# Listing of phony targets.
.PHONY : all begin finish end sizebefore sizeafter gccversion coff extcoff \
	clean clean_list program

